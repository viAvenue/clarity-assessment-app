// netlify/functions/submit-assessment.js

const fetch = require('node-fetch'); // Required for making HTTP requests
const { v4: uuidv4 } = require('uuid'); // For generating unique IDs

exports.handler = async (event, context) => {
    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: 'Method Not Allowed' };
    }

    try {
        const payload = JSON.parse(event.body);

        const {
            firstname,
            lastname,
            email,
            company,
            company_website,
            linkedin_profile,
            ascent_score,
            strategic_score,
            operational_score,
            leadership_score,
            individual_scores // This is an object like {q1: 3, q2: 4, ...}
        } = payload;

        const submissionId = uuidv4();
        // Timestamp is best generated by Google Apps Script for Google Sheet consistency
        // But we'll generate one here for HubSpot and ConvertKit if needed
        const timestamp = new Date().toISOString();

        // 1. Send data to Google Apps Script Web App (for Google Sheet)
        const googleAppsScriptUrl = process.env.GOOGLE_APPS_SCRIPT_WEB_APP_URL; // From Netlify Env Variables

        if (!googleAppsScriptUrl || googleAppsScriptUrl.includes('YOUR_APPS_SCRIPT_URL')) {
            console.warn("Google Apps Script URL not configured. Skipping Google Sheet submission.");
            // You might choose to throw an error here, or continue without GSheet if it's optional
            // For now, we'll continue and log a warning.
        } else {
            const googleSheetPayload = {
                submission_id: submissionId,
                email: email,
                firstname: firstname,
                lastname: lastname,
                company: company,
                company_website: company_website,
                linkedin_profile: linkedin_profile,
                ascent_score: ascent_score,
                strategic_score: strategic_score,
                operational_score: operational_score,
                leadership_score: leadership_score,
                individual_scores: individual_scores // Send the object, Apps Script will extract Q1-Q18
            };

            const googleSheetResponse = await fetch(googleAppsScriptUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(googleSheetPayload)
            });

            if (!googleSheetResponse.ok) {
                console.error('Google Apps Script Error:', await googleSheetResponse.json());
                throw new Error('Failed to send data to Google Sheet via Apps Script.');
            }
            console.log('Data sent to Google Sheet via Apps Script successfully.');
        }

        // 2. Send data to HubSpot Form Endpoint
        const hubspotPortalId = process.env.HUBSPOT_PORTAL_ID; // Your HubSpot Account ID
        const hubspotFormGuid = process.env.HUBSPOT_FORM_GUID; // The GUID of your specific HubSpot Form

        if (!hubspotPortalId || !hubspotFormGuid || hubspotPortalId.includes('YOUR_') || hubspotFormGuid.includes('YOUR_')) {
            console.warn("HubSpot Form IDs not configured. Skipping HubSpot submission.");
            // Again, you might choose to throw an error or continue.
        } else {
            // Construct the Assessment Detail Link (Google Sheet URL)
            // Note: This URL points to your sheet, the serverless function can generate it.
            const assessmentDetailLink = `https://docs.google.com/spreadsheets/d/${process.env.GOOGLE_SHEET_ID}/edit#gid=0`;

            const hubspotFormPayload = {
                fields: [
                    { name: 'firstname', value: firstname },
                    { name: 'lastname', value: lastname },
                    { name: 'email', value: email },
                    { name: 'company', value: company },
                    { name: 'website', value: company_website }, // HubSpot's standard field name for company website
                    { name: 'linkedin_profile', value: linkedin_profile }, // Your custom property name
                    { name: 'assessment_details_link', value: assessmentDetailLink }, // Your custom property name
                    { name: 'assessment_submission_id', value: submissionId }, // Your custom property name
                    { name: 'ascent_score', value: ascent_score }, // Your custom property name (Number type)
                    { name: 'strategic_score', value: strategic_score }, // Your custom property name (Number type)
                    { name: 'operational_score', value: operational_score }, // Your custom property name (Number type)
                    { name: 'leadership_score', value: leadership_score }, // Your custom property name (Number type)
                    // Individual scores are typically not mapped to HubSpot directly unless you have 18 custom fields,
                    // which is generally not recommended. The Google Sheet link covers the detail.
                ],
                context: {
                    pageUri: event.headers.referer || 'https://your-assessment-page.com', // Where the submission came from
                    pageName: 'Clarity Triad Assessment'
                },
                legalConsentOptions: { // Example: adjust based on your consent needs
                    consent: {
                        consentToProcess: true,
                        text: "I agree to allow My Company to store and process my personal data.",
                        communications: [
                            { value: true, subscriptionTypeId: 999, text: "I agree to receive marketing communications from My Company." } // Replace 999 with an actual subscription type ID if applicable
                        ]
                    }
                }
            };

            const hubspotResponse = await fetch(`https://api.hsforms.com/submissions/v3/portal/${hubspotPortalId}/forms/${hubspotFormGuid}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(hubspotFormPayload)
            });

            if (!hubspotResponse.ok) {
                console.error('HubSpot Form Submission Error:', await hubspotResponse.json());
                throw new Error('Failed to submit data to HubSpot form.');
            }
            console.log('Data submitted to HubSpot form successfully.');
        }

        // 3. ConvertKit Integration (No changes needed, typically works with free API keys)
        const convertKitApiKey = process.env.CONVERTKIT_API_KEY; // Replace with your ConvertKit API Key
        const convertKitFormId = process.env.CONVERTKIT_FORM_ID; // Replace with your ConvertKit Form ID
        const convertKitTagId = process.env.CONVERTKIT_TAG_ID; // Your ConvertKit Tag ID

        if (!convertKitApiKey || !convertKitFormId || !convertKitTagId) {
             console.warn("ConvertKit API details not configured. Skipping ConvertKit submission.");
        } else {
            const convertKitPayload = {
                api_key: convertKitApiKey, // Use api_key for subscriber management
                email: email,
                first_name: firstname,
                fields: {
                    ascent_score: ascent_score,
                    strategic_score: strategic_score,
                    operational_score: operational_score,
                    leadership_score: leadership_score,
                },
                tags: [convertKitTagId]
            };

            // Using ConvertKit's /subscribe endpoint which handles adding to form and applying tags
            const convertKitResponse = await fetch(`https://api.convertkit.com/v3/forms/${convertKitFormId}/subscribe`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(convertKitPayload)
            });

            if (!convertKitResponse.ok) {
                console.error('ConvertKit API Error:', await convertKitResponse.json());
                throw new Error('Failed to send data to ConvertKit.');
            }
            console.log('Data sent to ConvertKit successfully.');
        }

        // Return success response to the client (your index.html)
        return {
            statusCode: 200,
            body: JSON.stringify({ message: 'Assessment data submitted successfully!' }),
        };

    } catch (error) {
        console.error('Serverless function execution error:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Failed to process assessment data.', details: error.message }),
        };
    }
};